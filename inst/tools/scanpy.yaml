tool_name: scanpy
description: "Scanpy: scalable toolkit for analyzing single-cell gene expression data"
citation: "10.1186/s13059-017-1382-0"

environment:
  channels:
    - conda-forge
    - bioconda
  dependencies:
    - python=3.12
    - numpy<2.0
    - pip
    - pip:
        - scanpy[leiden]==1.10.1

commands:
  normalize:
    description: "Normalize counts per cell to a target total count"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output normalized AnnData file"
        required: true
    params:
      target_sum:
        datatype: numeric
        default: 1e4
        description: "Target total counts per cell"
      log_transform:
        datatype: boolean
        default: true
        description: "Apply log transformation after normalization"
    python: |
      import scanpy as sc
      import numpy as np
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      sc.pp.normalize_total(adata, target_sum={{ target_sum }})
      {% if log_transform %}
      sc.pp.log1p(adata)
      {% endif %}
      adata.write_h5ad("{{ output_h5ad }}")

  filter_cells:
    description: "Filter cells based on gene expression criteria"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output filtered AnnData file"
        required: true
    params:
      min_genes:
        datatype: integer
        default: 200
        description: "Minimum number of genes expressed per cell"
    python: |
      import scanpy as sc
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      
      # Calculate QC metrics
      adata.var['mt'] = adata.var_names.str.startswith('MT-')
      sc.pp.calculate_qc_metrics(adata, percent_top=None, log1p=False, inplace=True)
      
      # Filter cells
      sc.pp.filter_cells(adata, min_genes={{ min_genes }})
      
      adata.write_h5ad("{{ output_h5ad }}")

  filter_genes:
    description: "Filter genes based on expression criteria"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output filtered AnnData file"
        required: true
    params:
      min_cells:
        datatype: integer
        default: 3
        description: "Minimum number of cells expressing the gene"
    python: |
      import scanpy as sc
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      
      # Filter genes
      sc.pp.filter_genes(adata, min_cells={{ min_cells }})
      
      adata.write_h5ad("{{ output_h5ad }}")

  find_hvg:
    description: "Identify highly variable genes"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output AnnData file with HVG information"
        required: true
    params:
      n_top_genes:
        datatype: integer
        default: 2000
        description: "Number of highly variable genes to select"
    python: |
      import scanpy as sc
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      
      # Find highly variable genes
      sc.pp.highly_variable_genes(adata, n_top_genes={{ n_top_genes }})
      
      adata.write_h5ad("{{ output_h5ad }}")

  pca:
    description: "Perform Principal Component Analysis"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output AnnData file with PCA results"
        required: true
    params:
      n_comps:
        datatype: integer
        default: 50
        description: "Number of principal components"
    python: |
      import scanpy as sc
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      
      # Perform PCA
      sc.tl.pca(adata, n_comps={{ n_comps }})
      
      adata.write_h5ad("{{ output_h5ad }}")

  umap:
    description: "Compute UMAP embedding"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file with PCA"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output AnnData file with UMAP"
        required: true
    params:
      n_neighbors:
        datatype: integer
        default: 15
        description: "Number of neighbors for UMAP"
    python: |
      import scanpy as sc
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      
      # Compute neighborhood graph
      sc.pp.neighbors(adata, n_neighbors={{ n_neighbors }})
      
      # Compute UMAP
      sc.tl.umap(adata)
      
      adata.write_h5ad("{{ output_h5ad }}")

  leiden:
    description: "Perform Leiden clustering"
    binary: python
    help_flag: ""
    inputs:
      input_h5ad:
        datatype: anndata
        description: "Input AnnData file with neighborhood graph"
        required: true
    outputs:
      output_h5ad:
        datatype: anndata
        description: "Output AnnData file with clusters"
        required: true
    params:
      resolution:
        datatype: numeric
        default: 0.5
        description: "Resolution parameter for clustering"
    python: |
      import scanpy as sc
      
      adata = sc.read_h5ad("{{ input_h5ad }}")
      
      # Perform Leiden clustering
      sc.tl.leiden(adata, resolution={{ resolution }})
      
      adata.write_h5ad("{{ output_h5ad }}")
